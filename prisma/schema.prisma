// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  role      String   @default("user")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Address {
  id        String   @id @default(cuid())
  street    String
  number    String
  complement String?
  district  String
  city      String
  state     String
  zipCode   String
  isDefault Boolean  @default(false)
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id            String   @id @default(cuid())
  name          String
  slug          String   @unique
  description   String
  price         Float
  compareAtPrice Float?
  images        Json     // Array de objetos com url e alt
  category      String
  brand         String
  rating        Float    @default(0)
  reviewCount   Int      @default(0)
  tags          String[]
  stock         Int      @default(0)
  minStock      Int      @default(0)
  status        String   @default("active")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  stockMovements StockMovement[]
  orderItems    OrderItem[]
}

model ProductImage {
  id        String   @id @default(cuid())
  url       String
  alt       String
  isMain    Boolean  @default(false)
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductVariant {
  id             String   @id @default(cuid())
  name           String
  price          Float
  compareAtPrice Float?
  sku            String   @unique
  stockQuantity  Int
  productId      String
  product        Product  @relation(fields: [productId], references: [id])
  orderItems     OrderItem[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model StockMovement {
  id        String   @id @default(cuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  type      String   // "in" ou "out"
  quantity  Int
  reason    String?
  createdAt DateTime @default(now())
}

model Order {
  id          String      @id @default(cuid())
  customerId  String
  customer    Customer    @relation(fields: [customerId], references: [id])
  status      String      @default("pending")
  total       Float
  items       OrderItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
}

model Customer {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  phone       String?
  address     String?
  orders      Order[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
