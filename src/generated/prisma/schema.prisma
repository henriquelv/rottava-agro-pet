generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  name      String
  email     String    @unique
  password  String
  role      String    @default("user")
  createdAt DateTime  @default(now())
  updatedAt DateTime
  Address   Address[]
}

model Address {
  id         String   @id
  street     String
  number     String
  complement String?
  district   String
  city       String
  state      String
  zipCode    String
  isDefault  Boolean  @default(false)
  userId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime
  User       User     @relation(fields: [userId], references: [id])
}

model Customer {
  id        String   @id
  name      String
  email     String   @unique
  phone     String?
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime
  Order     Order[]
}

model Order {
  id         String      @id
  customerId String
  status     String      @default("pending")
  total      Float
  createdAt  DateTime    @default(now())
  updatedAt  DateTime
  Customer   Customer    @relation(fields: [customerId], references: [id])
  OrderItem  OrderItem[]
}

model OrderItem {
  id             String          @id
  orderId        String
  productId      String
  variantId      String?
  quantity       Int
  price          Float
  Order          Order           @relation(fields: [orderId], references: [id])
  Product        Product         @relation(fields: [productId], references: [id])
  ProductVariant ProductVariant? @relation(fields: [variantId], references: [id])
}

model Product {
  id                  String           @id
  codigo              String
  nome                String
  slug                String           @unique
  categoria           String
  preco               Decimal
  descricao           String
  descricao_detalhada String?
  imagem              String
  createdAt           DateTime         @default(now())
  updatedAt           DateTime
  OrderItem           OrderItem[]
  ProductImage        ProductImage[]
  ProductVariant      ProductVariant[]
  StockMovement       StockMovement[]
}

model ProductImage {
  id        String   @id
  url       String
  alt       String
  isMain    Boolean  @default(false)
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime
  Product   Product  @relation(fields: [productId], references: [id])
}

model ProductVariant {
  id             String      @id
  name           String
  price          Float
  compareAtPrice Float?
  sku            String      @unique
  stockQuantity  Int
  productId      String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime
  OrderItem      OrderItem[]
  Product        Product     @relation(fields: [productId], references: [id])
}

model SequelizeMeta {
  name String @id @db.VarChar(255)
}

model StockMovement {
  id        String   @id
  productId String
  type      String
  quantity  Int
  reason    String?
  createdAt DateTime @default(now())
  Product   Product  @relation(fields: [productId], references: [id])
}

model categories {
  id         String     @id @db.Uuid
  nome       String     @db.VarChar(255)
  slug       String     @unique @db.VarChar(255)
  descricao  String?
  created_at DateTime   @db.Timestamptz(6)
  updated_at DateTime   @db.Timestamptz(6)
  products   products[]
}

model images {
  id         String   @id @db.Uuid
  url        String   @db.VarChar(255)
  product_id String   @db.Uuid
  created_at DateTime @db.Timestamptz(6)
  updated_at DateTime @db.Timestamptz(6)
  products   products @relation(fields: [product_id], references: [id], onDelete: Cascade)
}

model migrations {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(255)
  executed_at DateTime? @default(now()) @db.Timestamp(6)
}

model order_items {
  id             String   @id @db.Uuid
  order_id       String   @db.Uuid
  product_id     String   @db.Uuid
  quantidade     Int
  preco_unitario Decimal  @db.Decimal(10, 2)
  created_at     DateTime @db.Timestamptz(6)
  updated_at     DateTime @db.Timestamptz(6)
  orders         orders   @relation(fields: [order_id], references: [id], onDelete: Cascade)
  products       products @relation(fields: [product_id], references: [id], onDelete: Cascade)
}

model orders {
  id          String              @id @db.Uuid
  user_id     String              @db.Uuid
  status      enum_orders_status? @default(pending)
  total       Decimal             @db.Decimal(10, 2)
  created_at  DateTime            @db.Timestamptz(6)
  updated_at  DateTime            @db.Timestamptz(6)
  order_items order_items[]
  users       users               @relation(fields: [user_id], references: [id], onDelete: NoAction)
}

model products {
  id                          String                       @id @db.Uuid
  codigo                      String?                      @db.VarChar(255)
  nome                        String                       @db.VarChar(255)
  slug                        String                       @unique @db.VarChar(255)
  descricao                   String?
  preco                       Decimal                      @db.Decimal(10, 2)
  preco_promocional           Decimal?                     @db.Decimal(10, 2)
  promocao_tipo               enum_products_promocao_tipo?
  promocao_expiracao          DateTime?                    @db.Timestamptz(6)
  promocao_quantidade_maxima  Int?
  promocao_quantidade_vendida Int?                         @default(0)
  estoque                     Int                          @default(0)
  estoque_minimo              Int                          @default(5)
  category_id                 String                       @db.Uuid
  created_at                  DateTime                     @db.Timestamptz(6)
  updated_at                  DateTime                     @db.Timestamptz(6)
  imagem                      String?                      @db.VarChar(255)
  images                      images[]
  order_items                 order_items[]
  categories                  categories                   @relation(fields: [category_id], references: [id], onDelete: NoAction)
}

model users {
  id         String           @id @db.Uuid
  name       String           @db.VarChar(255)
  email      String           @unique @db.VarChar(255)
  password   String           @db.VarChar(255)
  role       enum_users_role? @default(user)
  created_at DateTime         @db.Timestamptz(6)
  updated_at DateTime         @db.Timestamptz(6)
  orders     orders[]
}

enum enum_orders_status {
  pending
  processing
  completed
  cancelled
}

enum enum_products_promocao_tipo {
  tempo
  quantidade
}

enum enum_users_role {
  admin
  user
}
